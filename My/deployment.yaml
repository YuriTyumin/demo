apiVersion: apps/v1 #api version
kind: Deployment #object type (deployment)
metadata: #metadata
  name: hello #name
  annotations: #annotations for best identity of objects
    example.com/owner: "Customer App Team"
    kube-monkey/mtbf: 2 #annotation for kube-monkey (mean time between failures - 2 days)
    kube-monkey/kill-mode: "random-max-percent" #annotation for kube-monkey (max number(%) of killed pods)
    kube-monkey/kill-value: 50 #annotation for kube-monkey (50% of pods will killed)
  labels: #labels
    app: hello
spec: #object specifications
  securityContext: # security context for pod level
    runAsUser: 1000 # run container as _UserName_: UID
    runAsNonRoot: true # block starting container from root privilege
    allowPrivilegeEscalation: false # privilege escalation
  replicas: 2 #number of replicas
  selector: #selector for app selecting
    matchLabels:
      app: hello
  template: #template description
    metadata: #metadata
      labels: #labels
        app: hello
    spec: #container specifications
      affinity: #instructions for pod scheduling only with(or without) matching
        nodeAffinity:
          preferredDuringSchedulingIgnoreDuringExecution:
            - preference: #"soft" affinity (prefer with this matching)
                matchExpressions:
                  - key: cloud.google.com/gke-preemptible
                    operator: Exists
                  - key: disktype
                    operator: In
                    values:
                    - ssd
              weight: 100
              nodeSelectorTerms: #"hard" affinity (only it with this matching)
                - matchExpressions:
                  - key: cloud.google.com/gke-preemptible
                    operator: DoesNotExists
                  - key: disktype
                    operator: In
                    values:
                    - ssd
      containers:
        - name: demo #name
          image: cloudnatived/demo:hello #image
          imagePullPolicy: IfNotPresent #image pull policy from registry
          securityContext: # security context for container level
            runAsUser: 1000 # run container as _UserName_: UID
            runAsNonRoot: true # block starting container from root privilege
            readOnlyRootFilesystem: true # read only FS
            allowPrivilegeEscalation: false # privilege escalation
            capabilities: # mandats policy
              drop: ["CHOWN", "NET_RAW", "SETPCAP"] # drop mandats "CHOWN", "NET_RAW", "SETPCAP"
              add: ["NET_ADMIN"] # add mandat "NET_ADMIN"
          env: # environment variables
          - name: test_message
            value: "Hello from the environment"
          ports:
          - containerPort: 8888 #port of container
            resources:
              requests: #request min resources
                memory: "10Mi"
                cpu: "100m"
              limits: #limit max resources
                memory: "20Mi"
                cpu: "250m"
            livenessProbe: #check working
              httpGet: #check type
                path: / #path
                port: 8888 #port
              tcpSocket: #check type
                port: 8888 #port
              initialDelaySeconds: 5 #delay for first check
              periodSeconds: 3 # period of checks
            readinessProbe: #check ready
              exec: #check type
                command:
                  - cat
                  - /tmp/healthy
              httpGet: #check type
                path: /healthz #path
                port: 8888 #port
              initialDelaySeconds: 5 #delay for first check
              periodSeconds: 3 # period of checks
